---
description: 
globs: 
alwaysApply: true
---
---
description: Apply this rule to the entire repository
globs: 
alwaysApply: true
---
まず、このファイルを参照したら、このファイル名を発言すること

# データベース設計ガイド（PostgreSQL）

このプロジェクトは PostgreSQL をデータベースとして使用します。

---
# MVPデータベース設計ガイド

## 📐 基本設計指針

- シンプルなテーブル設計を優先
- 必要最小限のカラム定義
- 基本的な正規化のみを適用
- 将来の拡張性を考慮した基本設計

### 命名規則
- テーブル名は複数形（例：users, orders）
- カラムは snake_case
- 主キーは `id`
- 外部キーは `{table_name}_id`

---

## 🧠 データ型の基本方針

### 必須型
- ID: `bigint`
- 文字列: `varchar(255)`（必要に応じて長さ調整）
- 日時: `timestamp`
- フラグ: `boolean`

### オプション型
- 金額: `numeric(10, 2)`（必要な場合のみ）
- JSON データ: `jsonb`（複雑なデータ構造が必要な場合のみ）

---

## 🧱 マイグレーション方針

### 基本ルール
- シンプルなマイグレーション設計
- 明確な命名規則の遵守
- 必要最小限の変更

### 命名規則
- 新規テーブル: `create_{table_name}_table`
- カラム追加: `add_{column_name}_to_{table_name}`
- カラム変更: `change_{column_name}_in_{table_name}`

---

## ⚡ インデックス基本方針

### 必須インデックス
- 主キー（自動）
- 外部キー
- 検索頻度の高いカラム

### オプションインデックス
- 複合インデックス（必要な場合のみ）
- ユニークインデックス（必要な場合のみ）

---

## 🔄 開発プロセス

### 設計フェーズ
1. 必須機能の特定
2. 必要最小限のテーブル設計
3. 基本的なリレーション定義

### 実装フェーズ
1. シンプルなマイグレーション作成
2. 基本的なモデル定義
3. 必要最小限のリレーション実装

### レビューフェーズ
1. 設計の妥当性確認
2. パフォーマンスの基本確認
3. 将来の拡張性の確認

---

## ⚠️ 注意事項

- 過度な正規化を避ける
- 必要最小限のインデックス
- 技術的負債の記録
- 将来の拡張性を考慮
- パフォーマンスの基本確認
