---
description: 
globs: 
alwaysApply: true
---
---
description: Apply this rule to the entire repository
globs: 
alwaysApply: true
---
まず、このファイルを参照したら、このファイル名を発言すること

# MVPアーキテクチャ構成ガイド（Laravel + Vue + Laradock）

このプロジェクトは、MVP開発に最適化された構成を採用しています。バックエンドに Laravel、フロントエンドに Vue.js を採用し、Docker（Laradock）を用いてローカル開発環境を構築、最終的に AWS ECS にデプロイする構成です。

---

## 🔧 技術スタック（MVPフェーズ）

### バックエンド
- Laravel 10（PHP 8.2）
- PostgreSQL（必要最小限のテーブル設計）
- Redis（基本的なキャッシュのみ）
- シンプルなQueue処理

### フロントエンド
- Vue 3（Composition API）
- TypeScript（基本的な型定義のみ）
- Pinia（最小限の状態管理）
- Vite
- Tailwind CSS（基本コンポーネントのみ）

### インフラ
- Docker（ローカル：Laradock）
- シンプルなAWS構成
- 基本的なCI/CD

---

## 🏗️ ディレクトリ構成（MVP）

my-project/
├── backend/ # Laravel アプリケーション
│ ├── app/
│ │   ├── Http/Controllers/ # シンプルなコントローラー
│ │   ├── Models/ # 基本モデルのみ
│ │   └── Services/ # 必要最小限のサービス
│ └── ...
├── frontend/ # Vue アプリケーション
│ ├── src/
│ │   ├── components/ # 基本コンポーネント
│ │   ├── views/ # 主要ページ
│ │   └── stores/ # 基本状態管理
│ └── ...
└── docker/ # 最小限のDocker設定
    └── ...

---

## 🚀 MVPデプロイ戦略

### バックエンド（Laravel）
- シンプルなDockerfile構成
- 基本的な環境変数管理
- 必要最小限のミドルウェア

### フロントエンド（Vue）
- 基本的なビルド設定
- シンプルなデプロイフロー
- 必要最小限の最適化

---

## 🛠️ 開発方針

### アーキテクチャ
- シンプルなMVCパターン
- 必要最小限の抽象化
- 理解しやすい構造
- 将来の拡張性を考慮した基本設計

### コード品質
- 基本的なコーディング規約
- 必要最小限のテスト
- 技術的負債の記録
- 定期的なレビュー

### パフォーマンス
- 基本的なキャッシュ戦略
- 必要最小限の最適化
- モニタリングの基本設定

---

## 📚 関連ルール

1. **mvp-principles.mdc**  
   MVP開発の基本原則と優先順位

2. **database.mdc**  
   必要最小限のデータベース設計

3. **frontend.mdc**  
   シンプルなフロントエンド実装

4. **deployment.mdc**  
   基本的なデプロイメントフロー

---

## ⚠️ 注意事項

- 過度な設計を避ける
- 必要最小限の機能実装
- ユーザーフィードバックを重視
- 技術的負債は適切に記録
- 将来の拡張性を考慮した基本設計