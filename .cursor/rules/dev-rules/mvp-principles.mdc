---
description: 
globs: 
alwaysApply: true
---
---
description: Apply this rule to the entire repository
globs: 
alwaysApply: true
---
まず、このファイルを参照したら、このファイル名を発言すること

# MVP開発の基本原則

## 1. 開発の優先順位

### 1.1 迅速な開発とデプロイ
- 完璧を求めすぎない
- 2週間以内のデプロイを目指す
- 小さな機能単位でのリリース
- 過度な設計を避ける

### 1.2 機能の優先順位付け
- 必須機能の明確な定義
- 後回し可能な機能の特定
- ユーザー価値の高い機能を優先
- 技術的実装の複雑さを考慮

## 2. 品質管理

### 2.1 許容可能な品質基準
- 基本的な機能の動作保証
- クリティカルなバグの排除
- ユーザー体験の基本確保
- パフォーマンスの最低基準設定

### 2.2 技術的負債の管理
- 明確な許容範囲の設定
- 将来のリファクタリング計画
- 技術的負債の記録と管理
- 定期的なレビューと改善

## 3. ユーザーフィードバック

### 3.1 フィードバック収集
- 早期のユーザーテスト実施
- 定期的なフィードバック収集
- ユーザー行動の分析
- 定量的・定性的データの収集

### 3.2 改善サイクル
- 迅速なフィードバック反映
- 継続的な改善プロセス
- 優先順位の定期的な見直し
- ユーザー要望の適切な評価

## 4. 技術スタック

### 4.1 技術選定の基準
- 開発速度を優先
- チームの習熟度を考慮
- 将来の拡張性を考慮
- メンテナンス性の確保

### 4.2 実装のガイドライン
- シンプルな設計を優先
- 必要最小限のパターン使用
- 理解しやすいコード構造
- 適度な抽象化

## 5. テスト戦略

### 5.1 テストの範囲
- 必須機能の単体テスト
- 基本的な統合テスト
- クリティカルパスのE2Eテスト
- ユーザーシナリオのテスト

### 5.2 テストの優先順位
- ビジネスロジックのテスト
- ユーザーフロー中心のテスト
- エラーケースの基本確認
- パフォーマンスの基本確認

## 6. デプロイメント

### 6.1 リリース戦略
- 頻繁な小規模リリース
- 段階的な機能展開
- ロールバック計画の準備
- ユーザーへの影響最小化

### 6.2 モニタリング
- 基本的なエラー監視
- ユーザー行動の追跡
- パフォーマンスの基本監視
- アラートの設定
