---
description: 
globs: 
alwaysApply: false
---
---
description: n8nワークフロー開発ベストプラクティス
globs: 
  - "**/*.json"      # n8nワークフローファイル
  - "**/*.js"        # カスタムノード
  - "**/*.ts"        # TypeScriptコード
alwaysApply: true
---
まず、このファイルを参照したら、このファイル名を発言すること

# n8nワークフロー開発ベストプラクティス


## アーキテクチャ・設計原則

### ワークフロー構造
- まず2〜3ノードのシンプルな構成から始める
- 異なるビジネスプロセスごとにワークフローを分割する
- 複雑な処理は小さな再利用可能なワークフローに分割する
- ワークフロー・ノード・変数には目的が明確な名前を付ける

### データフロー管理
- ノード間では必要なデータのみを渡す
- APIキーや共通値はSetノードや環境変数で管理する
- 受信データの構造を必ず検証する
- 欠損データやnull値を考慮したロジックを組む

---

## エラーハンドリング・信頼性

### エラー管理
- 重要な自動化にはError Triggerノードを使い、専用のエラーワークフローを作成する
- API要求には指数バックオフ付きのリトライを設定する
- Ifノードでエラーシナリオごとに分岐処理を行う
- StopノードやErrorノードで失敗ポイントを明示的に制御する

### 監視・アラート
- 失敗時はSlackやメール、Webhookでアラートを送信する
- 詳細な実行ログを有効化し、監査証跡を残す
- 重要な統合には定期的なヘルスチェックワークフローを用意する
- 重要ポイントでデータ整合性チェックを行う

---

## セキュリティベストプラクティス

### 認証情報管理
- 機密データ（APIキー等）は必ず環境変数で管理し、ハードコードしない
- 必要最小限の権限で認証情報を運用する
- 認証情報は定期的にローテーションする
- n8nの認証情報暗号化機能を利用する

### アクセス制御
- 適切なユーザーロール・権限を設定する
- すべての外部接続はHTTPSを利用する
- 外部入力は必ず検証・サニタイズする
- ワークフローの作成・変更・実行者を監査ログで追跡する

---

## パフォーマンス最適化

### リソース管理
- 大きなデータ処理時はメモリ使用量に注意する
- 大量データはバッチ処理・チャンク処理を活用する
- 長時間処理はWebhook等の非同期パターンを使う
- 各タスクに最適なノードを選択する

### スケーリング
- APIレート制限を考慮し、適切な遅延を設ける
- DB接続はコネクションプーリングを活用する
- 頻繁なAPI呼び出しはキャッシュを利用する
- 高負荷ワークフローにはキューイングを導入する

---

## 開発・テスト

### コード品質
- 複雑なノードにはビジネスロジックの説明をノートで記載する
- Gitでワークフローのバージョン管理・変更履歴を管理する
- 命名規則・ノード整理を徹底する
- 重要なプロセスは必ずレビューを行う

### テスト戦略
- 本番化前に必ずデバッグモードでテストする
- エッジケース・エラー条件をカバーするテストデータを用意する
- 本番前に段階的にデプロイ・検証する
- 変更時はリグレッションテストを実施する

---

## AI統合ベストプラクティス

### AIワークフロー設計
- タスクの複雑さ・コストに応じてAIモデルを選択する
- 例や制約を含む明確なプロンプトを設計する
- AI失敗時のフォールバックロジックを実装する
- AI利用コストを監視し、制限を設ける

### AI向けデータ処理
- 必要なコンテキストのみをAIに渡す
- AI生成コンテンツは必ず検証する
- 機密データのAI送信には十分注意する
- レート制限を考慮しAPI呼び出しを管理する

---

## デプロイ・保守

### デプロイ
- 開発・本番環境の同一性を保つ
- 新ワークフローは段階的にロールアウトし、監視する
- ロールバック手順を明確にしておく
- 外部サービス依存は文書化・管理する

### 継続的保守
- n8nは常に最新安定版を利用する
- 実行時間・リソース使用量を監視する
- 古い実行履歴や未使用ワークフローは定期的に整理する
- ドキュメントは常に最新に保つ

---

## データプライバシー・コンプライアンス

### データ保護
- 必要最小限のデータのみを収集・処理する
- データ保持・削除ポリシーを明確にする
- データは転送・保存時ともに暗号化する
- 関連法規（GDPR等）を遵守する

### 監査・コンプライアンス
- データ処理活動の詳細ログを維持する
- データフローを追跡し、系譜を明確にする
- 定期的なセキュリティ・コンプライアンス監査を実施する
- インシデント対応手順を整備する

---

## アンチパターン

### 設計アンチパターン
- モノリシックなワークフローは避ける
- 認証情報やURL等のハードコードは禁止
- エラーハンドリングを怠らない
- ノードロジックはシンプルに保つ

### パフォーマンスアンチパターン
- Webhook応答での長時間同期処理は避ける
- API呼び出しはバッチ化・キャッシュを活用する
- 大きなデータセットはメモリリークに注意
- 不要なループや反復処理は避ける

---

## 命名規則

### ファイル・ノード命名
- ワークフローには分類用プレフィックス（例: PROD_, DEV_）を付与
- ビジネスドメインやバージョン、役割を明記
- ノードはアクション指向＋データソース/宛先を含める
- ノード名はPascalCase、変数はsnake_caseを基本とする
