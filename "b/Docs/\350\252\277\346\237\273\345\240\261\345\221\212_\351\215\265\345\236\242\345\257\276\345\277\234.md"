# 鍵垢対応に関する調査報告

## 1. 現状仕様の確認
- 本リポジトリの設計資料およびn8nフローでは、X APIへのアクセスに**Bearer Token認証**（アプリ単位認証）を利用している。
  - 例：`Docs/仕様書/機能一覧.md`では「Bearer Token認証」と明記されている【F:Docs/仕様書/機能一覧.md†L10-L12】。
  - `n8n/flows/x_fetch_to_notion.json`ではHTTPヘッダ`Authorization: Bearer {{ $env.X_BEARER_TOKEN }}`を送信している【F:n8n/flows/x_fetch_to_notion.json†L30-L32】。
- この認証方式では公開アカウントのツイート取得のみ可能で、鍵付きアカウントの投稿にはアクセスできない。

## 2. 鍵垢の取得に必要な変更点
1. **ユーザーコンテキスト認証の導入**
   - OAuth 1.0a または OAuth 2.0 (Authorization Code Flow) によるユーザー認可が必要。
   - ユーザー毎のアクセストークンを安全に保存・更新する仕組みが求められる。
2. **n8nフロー・API設定の修正**
   - HTTPリクエストノードでユーザーのアクセストークンを使用するよう変更。
   - 認可手順を組み込むか、外部サービスで取得したトークンを環境変数等で管理する設計が必要。
3. **ドキュメント・運用フローの更新**
   - OAuth設定方法、トークン管理方針、利用許諾フローなどを新たに策定する。

## 3. 影響範囲
- ログインユーザーごとに異なるトークンを使用する場合、Laravel側のDB設計やn8nへの連携方法も再検討が必要。
- 鍵垢取得はXの利用規約上も制限が多いため、APIポリシーを確認の上、適切な同意取得やアクセス制御を実装する必要がある。

## 4. 結論
- 現状のBearer Token認証のみの仕様では、鍵付きアカウントの投稿取得は不可能。
- ユーザーコンテキストでのOAuth認証を導入するなど、**仕様変更と追加実装が必要**となる。
- 具体的には、認可フローの実装、トークン管理、n8nフロー修正、関連ドキュメント更新を行う必要がある。

